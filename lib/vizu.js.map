{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","src/component.js","src/private/animate.js","src/private/overslash.js","src/private/utilities.js","src/vizu.js"],"names":[],"mappings":"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","file":"vizu.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Component from './src/component';\nimport Vizu from './src/vizu';\n\nexport default { Component, Vizu };\n","/* global document */\n/* eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 1, \"let\": 1, \"const\": 2 } }] */\n/* eslint one-var: 0 */\n// -- Vendor modules\n\n// -- Local modules\nimport Vizu from './vizu';\nimport Anim from './private/animate';\nimport _ from './private/overslash';\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\n/**\n* This class defines the web component.\n*\n* @namespace vizu\n*/\nclass Component {\n/**\n * Creates an unique ID for this component.\n *\n * @constructor ()\n * @public\n * @param {}          -,\n */\n  constructor() {\n    // Create an unique id for this component:\n    this.id = `i${Math.random().toString(36).substr(2, 7)}`;\n    this.cList = null;\n    this.components = null;\n    this.props = {};\n    this.props.options = {};\n  }\n\n  /**\n   * Initialises the variables when the component is rendered.\n   *\n   * @method ()\n   * @public\n   * @param {}        -,\n   * @returns {}      -,\n   * @since 0.0.0\n   */\n  getInitialState() {\n    // To avoid eslint error!\n    this.props = {};\n    this.props.options = {};\n  }\n\n  /**\n   * Returns the the first element that matches the specified CSS selector(s).\n   *\n   * @method (arg1)\n   * @public\n   * @param {String}    the CSS selector(s),\n   * @returns {Object}  returns the first element that matches a specified\n   *                    CSS selector(s),\n   * @since 0.0.0\n   */\n  $(el) {\n    const that = this\n        , docu = Vizu.vdom ? Vizu.vdom.window.document : document\n        ;\n\n    /**\n     * Returns the the first element that matches the specified CSS selector(s).\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the CSS selector(s),\n     * @returns {Object}  returns the first element that matches a specified\n     *                    CSS selector(s),\n     * @since 0.0.0\n     */\n    const getElement = function() {\n      if (el) {\n        // Returns the the first element that matches the selector(s):\n        return docu.querySelector(`#${that.id}`).querySelector(el);\n      }\n      // Return the entire 'web component':\n      return docu.querySelector(`#${that.id}`);\n    };\n\n    /**\n     * Gets/Sets the HTML contents of the element,\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the html contents to add,\n     * @returns {String}  returns the node DOMString or this,\n     * @since 0.0.0\n     */\n    const html = function(xmlString) {\n      if (xmlString) {\n        getElement().innerHTML = xmlString;\n        return this;\n      }\n      return getElement().innerHTML;\n    };\n\n    /**\n     * Removes all the childs of the current node.\n     *\n     * @method ()\n     * @public\n     * @param {}          -,\n     * @returns {Object}  returns this,\n     * @since 0.0.4\n     */\n    const empty = function() {\n      const node = getElement();\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n      return this;\n    };\n\n    /**\n     * Appends an HTML string after the last child of the current node.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    an HTML string,\n     * @returns {Object}  returns this,\n     * @since 0.0.4\n     */\n    const append = function(xmlString) {\n      if (typeof xmlString === 'string') {\n        getElement().insertAdjacentHTML('beforeend', xmlString);\n      }\n      return this;\n    };\n\n    /**\n     * Appends an HTML string before the first child of the current node.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    an HTML string,\n     * @returns {Object}  returns this,\n     * @since 0.0.6\n     */\n    const prepend = function(xmlString) {\n      if (typeof xmlString === 'string') {\n        getElement().insertAdjacentHTML('afterbegin', xmlString);\n      }\n      return this;\n    };\n\n    /**\n     * Appends an HTML string after the current node.\n     *\n     * Nota: this method adds a node after the current node only if it is\n     * a child node of this component. 'after' is forbidden on the root node.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    an HTML string,\n     * @returns {Object}  returns this,\n     * @since 0.0.6\n     */\n    const after = function(xmlString) {\n      const elem = getElement();\n      if (typeof xmlString === 'string' && elem.id !== that.id) {\n        elem.insertAdjacentHTML('afterend', xmlString);\n      }\n      return this;\n    };\n\n    /**\n     * Appends an HTML string before the current node.\n     *\n     * Nota: this method adds a node before the current node only if it is\n     * a child node of this component. 'before' is forbidden on the root node.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    an HTML string,\n     * @returns {Object}  returns this,\n     * @since 0.0.6\n     */\n    const before = function(xmlString) {\n      const elem = getElement();\n      if (typeof xmlString === 'string' && elem.id !== that.id) {\n        getElement().insertAdjacentHTML('beforebegin', xmlString);\n      }\n      return this;\n    };\n\n    /**\n     * Replaces the current node with the given DOMString.\n     *\n     * Nota: this method replaces the current node only if it is\n     * a child node of this component. 'replaceWith' is forbidden on the root node.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    an HTML string,\n     * @returns {Object}  returns this,\n     * @since 0.0.6\n     */\n    const replaceWith = function(xmlString) {\n      const oldChild = getElement()\n          , parent   = oldChild.parentNode\n          // , index    =  Array.prototype.indexOf.call(parent.children, oldChild)\n          , wrapper  = docu.createElement('div')\n          ;\n      let newChild\n        ;\n\n      if (typeof xmlString === 'string' && oldChild.id !== that.id) {\n        // Replace the old child by new one:\n        wrapper.innerHTML = xmlString;\n        newChild = wrapper.firstChild;\n        parent.replaceChild(newChild, oldChild);\n      }\n      return this;\n    };\n\n    /**\n     * Gets/Sets the text contents of the element,\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the text contents to add,\n     * @returns {String}  returns the text contents or this;,\n     * @since 0.0.0\n     */\n    const text = function(texte) {\n      if (texte) {\n        getElement().textContent = texte;\n        return this;\n      }\n      return getElement().textContent;\n    };\n\n    /**\n     * Gets/Sets the style attribute of the element,\n     *\n     * @method (arg1, arg2)\n     * @public\n     * @param {String}    the style attribute,\n     * @param {String}    the style attribute value,\n     * @returns {String}  returns the style attribute value or this,\n     * @since 0.0.3\n     */\n    const css = function(styleAttr, value) {\n      const arr = typeof styleAttr === 'string' ? styleAttr.split('-') : [];\n      let attr = '';\n\n      // Convert style attribute name with '-' (ex.: 'font-size' to 'fontSize'):\n      for (let i = 0; i < arr.length; i++) {\n        if (i === 0) {\n          attr += arr[i];\n        } else {\n          attr += arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n        }\n      }\n\n      if (!value) {\n        // Get attribute:\n        return getElement().style[attr];\n      }\n\n      // Set attribute:\n      getElement().style[attr] = value;\n      return this;\n    };\n\n    /**\n     * Returns the DOMTokenList collection of the class attributes of the element.\n     *\n     * @method ()\n     * @public\n     * @param {}          -,\n     * @returns {Object}  returns the DOMTokenList of the element,\n     * @since 0.0.0\n     */\n    const getClassList = function() {\n      return getElement().classList;\n    };\n\n    /**\n     * Adds a class name to the element.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the class name to add,\n     * @returns {Object}  returns this,\n     * @since 0.0.0\n     */\n    const addClass = function(className) {\n      getElement().classList.add(className);\n      return this;\n    };\n\n    /**\n     * Removes a class name from the element.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the class name to remove,\n     * @returns {Object}  returns this,\n     * @since 0.0.0\n     */\n    const removeClass = function(className) {\n      getElement().classList.remove(className);\n      return this;\n    };\n\n    /**\n     * Toggles a class name for the element.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the class name to add/remove,\n     * @returns {Object}  returns this,\n     * @since 0.0.0\n     */\n    const toggleClass = function(className) {\n      getElement().classList.toggle(className);\n      return this;\n    };\n\n    /**\n     * Sets or Gets the specified attribute.\n     *\n     * @method (arg1, arg2)\n     * @public\n     * @param {String}    the attribute name,\n     * @param {String}    the attribute value,\n     * @returns {String}  returns the attribute value or this,\n     * @since 0.0.6\n     */\n    const attr = function(attribute, value) {\n      if (value) {\n        getElement().setAttribute(attribute, value);\n        return this;\n      }\n      return getElement().getAttribute(attribute);\n    };\n\n    /**\n     * Removes the specified attribute.\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the attribute name,\n     * @returns {Object}  returns this,\n     * @since 0.0.0\n     */\n    const removeAttr = function(attribute) {\n      if (attribute) {\n        getElement().removeAttribute(attribute);\n      }\n      return this;\n    };\n\n    /**\n     * Performs a custom animation of a set of CSS properties.\n     *\n     * @method (properties [, duration ] [, easing ] [, complete ])\n     * @public\n     * @param {Object}    An object of CSS properties,\n     * @param {Number}    define how long the animation run,\n     * @param {Easing}    the easing animation method,\n     * @param {Function}  the function to call at completion,\n     * @returns {Object}  returns this,\n     * @since 0.0.7\n     */\n    const animate = function(properties, ...args) {\n      const DTIME = 400\n          , FAST  = 200\n          , SLOW  = 600\n          , INC   = 10\n          , elem  = getElement()\n          , delay = INC\n          ;\n\n      // Is the argument properties an object?\n      if (!_.isLiteralObject(properties)) {\n        return this;\n      }\n\n      // Extract the optional arguments:\n      const argus = Anim.extractArgs(args);\n\n      // Set the duration:\n      const duration = _.isNumber(argus.duration)\n        ? argus.duration\n        : (function(arg) {\n          if (arg === 'fast') return FAST;\n          if (arg === 'slow') return SLOW;\n          return DTIME;\n        }(argus.duration));\n\n      // Set the easing (swing only for the time being):\n      const easing = (Anim.easing && Anim.easing[argus.easing])\n        ? Anim.easing[argus.easing]\n        : Anim.swing;\n\n      // Set the callback:\n      const callback = argus.callback ? argus.callback : null;\n\n      // Run the animation:\n      Anim.run(elem, properties, easing, duration, delay, callback);\n\n      // Test Mode:\n      if (Vizu.vdom) {\n        this.probe = {\n          duration,\n          easing: (Anim.easing && Anim.easing[argus.easing]) ? argus.easing : 'swing',\n          callback,\n        };\n      }\n\n      return this;\n    };\n\n    /**\n     * Attachs an event listener to the current node.\n     *\n     * @method (arg1, arg2)\n     * @public\n     * @param {String}    the DOM event string,\n     * @param {Function}  the listner function,\n     * @returns {Object}  returns this,\n     * @since 0.0.5\n     */\n    const on = function(event, listener) {\n      getElement().addEventListener(event, listener);\n      return this;\n    };\n\n    /**\n     * Removes an event listener from the current node.\n     *\n     * @method (arg1, arg2)\n     * @public\n     * @param {String}    the DOM event string,\n     * @param {Function}  the listner function,\n     * @returns {Object}  returns this,\n     * @since 0.0.5\n     */\n    const off = function(event, listener) {\n      getElement().removeEventListener(event, listener);\n      return this;\n    };\n\n    return {\n      id: getElement() ? getElement().id : null,\n      getElement,\n      html,\n      empty,\n      append,\n      prepend,\n      after,\n      before,\n      replaceWith,\n      text,\n      css,\n      getClassList,\n      addClass,\n      removeClass,\n      toggleClass,\n      attr,\n      removeAttr,\n      animate,\n      on,\n      off,\n    };\n  }\n\n  /**\n   * Attaches event(s) to the given node.\n   *\n   * @method (arg1, arg2)\n   * @public\n   * @param {String}    the DOM event name,\n   * @param {Function}  the event listener,\n   * @returns {Funtion} returns this,\n   * @since 0.0.5\n   */\n  /* istanbul ignore next */\n  events() {\n    // Just to avoid eslint error!\n    return this;\n  }\n\n  /**\n   * Returns the defined web component.\n   *\n   * @method ()\n   * @public\n   * @param {}          -,\n   * @returns {String}  returns the web component,\n   * @since 0.0.0\n   */\n  /* istanbul ignore next */\n  render() {\n    return `<div>${this.id}</div>`;\n  }\n\n  /**\n   * Processes the web component to convert child(s) to plain HTML.\n   *\n   * @method ()\n   * @private\n   * @param {}          -,\n   * @returns {String}  returns the web component,\n   * @since 0.0.0\n   */\n  get rendered() {\n    let t;\n    // Initializes:\n    this.getInitialState();\n    // Add an unique ID to this component:\n    // let t = this.render().replace(/<div>/, `<div id=\"${this.id}\">`);\n    const co = this.render();\n    if (co.match(/^\\s*<div/)) {\n      t = co.replace(/^\\s*<div/, `<div id= \"${this.id}\"`);\n    } else if (co.match(/^\\s*<header/)) {\n      t = co.replace(/^\\s*<header/, `<header id= \"${this.id}\"`);\n    } else if (co.match(/^\\s*<footer/)) {\n      t = co.replace(/^\\s*<footer/, `<footer id= \"${this.id}\"`);\n    } else {\n      t = co;\n    }\n\n    if (this.cList) {\n      // This component includes components, render them:\n      this.components = {};\n      const keys = Object.keys(this.cList);\n      for (let i = 0; i < keys.length; i++) {\n        const c = new this.cList[keys[i]]();\n        t = t.replace(keys[i], c.rendered);\n        this.components[keys[i].replace(/[^a-zA-z0-9]/g, '')] = c;\n      }\n    }\n    // Return the rendered web component:\n    return t;\n  }\n\n  /**\n   * Processes the web component events.\n   *\n   * @method ()\n   * @private\n   * @param {}          -,\n   * @returns {}        -,\n   * @since 0.0.5\n   */\n  get evented() {\n    this.events();\n  }\n}\n\nexport default Component;\n","/* global */\n/* eslint one-var: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\nimport _ from './overslash';\nimport u from './utilities';\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\nexport default {\n\n  /**\n   * Extracts the optional argument of 'animate'.\n   *\n   * @function (arg1, arg2, arg3)\n   * @private\n   * @param {?}         duration, easing or callback,\n   * @param {?}         easing or callback,\n   * @param {Object}    the function to call at completion,\n   * @returns {Object}  returns an object with the properties duration, easing\n   *                    and callback,\n   * @since 0.0.7\n   */\n  extractArgs(...arg) {\n    const nb = arg[0].length\n        , args = arg[0]\n        ;\n\n    let duration\n      , easing\n      , callback\n      ;\n\n    switch (nb) {\n      case 0:\n        break;\n\n      case 1:\n        if (_.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n        } else if (_.isString(args[0])) {\n          easing = args[0];\n        } else if (_.isFunction(args[0])) {\n          callback = args[0];\n        }\n        break;\n\n      case 2:\n        if (_.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n          if (_.isString(args[1])) {\n            easing = args[1];\n          } else if (_.isFunction(args[1])) {\n            callback = args[1];\n          }\n        } else if (_.isString(args[0])) {\n          easing = args[0];\n          if (_.isFunction(args[1])) {\n            callback = args[1];\n          }\n        }\n        break;\n\n      case 3:\n        if (_.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n        }\n        if (_.isString(args[1])) {\n          easing = args[1];\n        }\n        if (_.isFunction(args[2])) {\n          callback = args[2];\n        }\n        break;\n\n      /* istanbul ignore next */\n      default:\n        break;\n    }\n    return {\n      duration,\n      easing,\n      callback,\n    };\n  },\n\n  /**\n   * Retrieves the CSS property values for the given node.\n   *\n   * @function (arg1, arg2)\n   * @private\n   * @param {Object}    the given node,\n   * @param {Object}    the CSS properties to animate,\n   * @returns {Object}  returns an object with the properties initial, change, suffix\n   *                    per animated property,\n   * @since 0.0.7\n   */\n  getProps(el, properties) {\n    const keys = Object.keys(properties)\n        , props = {}\n        , names = []\n        ;\n\n    let name\n      , i\n      ;\n\n    // Parse the properties:\n    for (i = 0; i < keys.length; i++) {\n      // Normalize the name of the property:\n      name = u.normalizeCssPropertyName(keys[i]);\n      // Check it is a valid CSS property:\n      if (el.style[name]) {\n        names.push(name);\n        props[name] = {\n          initial: parseFloat(el.style[name], 10),\n          change: parseFloat(properties[keys[i]]) - parseFloat(el.style[name]),\n          suffix: el.style[name].replace(/[0-9.]/g, ''),\n        };\n      }\n    }\n    props.name = names;\n    return props;\n  },\n\n  /**\n   * Updates dynamically the CSS properties from their initial value to their final.\n   *\n   * @function (arg1, arg2, arg3, arg4, arg5, arg6)\n   * @private\n   * @param {Object}    the given node,\n   * @param {Object}    the CSS properties to update,\n   * @param {Function}  the easing method,\n   * @param {Number}    the animation duration,\n   * @param {Number}    the animation step,\n   * @param {Function}  the function to call at the completion,\n   * @returns {}        -,\n   * @since 0.0.7\n   */\n  run(el, properties, easing, duration, delay, callback) {\n    const props = this.getProps(el, properties)\n        , elem = el\n        ;\n\n    let lapseOfTime = 0\n      ;\n\n    const timer = setInterval(() => {\n      lapseOfTime += delay;\n      if (lapseOfTime > duration) {\n        clearInterval(timer);\n        if (callback) callback();\n      }\n      // easing:\n      for (let i = 0; i < props.name.length; i++) {\n        elem.style[props.name[i]] = easing(\n          lapseOfTime,\n          props[props.name[i]].initial,\n          props[props.name[i]].change,\n          duration) + props[props.name[i]].suffix;\n      }\n    }, delay);\n  },\n\n  /**\n   * The default easing method (if PicoQ.easing.e() aren't provided).\n   *\n   * @function (arg1, arg2, arg3, arg4)\n   * @private\n   * @param {Number}    the current lapse time,\n   * @param {Number}    the initial CSS property value,\n   * @param {Number}    the difference between the final and the initial value,\n   * @param {Number}    the animation duration,\n   * @returns {Number}  returns the value of the CSS property at the current lapse time,\n   * @since 0.0.7\n   */\n  /* eslint-disable no-mixed-operators */\n  swing(t, b, c, d) {\n    return c * (0.5 - Math.cos(t / d * Math.PI) / 2) + b;\n  }, /* eslint-enable no-mixed-operators */\n}; /* eslint-enable no-underscore-dangle */\n","/* global */\n/* eslint one-var: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\nexport default {\n\n  /**\n   * Is a given value a string?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}      the object to test,\n   * @returns {Boolean}   returns true or false,\n   * @since 0.0.7\n   */\n  isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n  },\n\n  /**\n   * Is a given value a number?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}      the object to test,\n   * @returns {Boolean}   returns true or false,\n   * @since 0.0.7\n   */\n  isNumber(obj) {\n    return Object.prototype.toString.call(obj) === '[object Number]';\n  },\n\n  /**\n   * Is a given variable a literal object?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}    the object to test,\n   * @returns {Boolean} returns true or false,\n   * @since 0.0.7\n   */\n  isLiteralObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  },\n\n  /**\n   * Is a given variable a function?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}    the object to test,\n   * @returns {Boolean} returns true or false,\n   * @since 0.0.7\n   */\n  isFunction(obj) {\n    return Object.prototype.toString.call(obj) === '[object Function]';\n  },\n};\n","/* global */\n/* eslint one-var: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\nimport _ from './overslash';\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\nexport default {\n\n  /**\n   * Normalizes the CSS properties.\n   * (replace '-' between composite name by camelcase style).\n   * Ex: font-size -> fontSize\n   *\n   * @function (arg1)\n   * @private\n   * @param {String}    the CSS property name,\n   * @returns {String}  the normalized CSS property name,\n   * @since 0.0.7\n   */\n  normalizeCssPropertyName(name) {\n    const arr = _.isString(name) ? name.split('-') : []\n        ;\n\n    let normalized = ''\n      ;\n\n    // Convert name with '-' (ex.: 'font-size' to 'fontSize'):\n    for (let i = 0; i < arr.length; i++) {\n      if (i === 0) {\n        normalized += arr[i];\n      } else {\n        normalized += arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n      }\n    }\n    return normalized;\n  },\n};\n","/* global document */\n/* eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 1, \"let\": 1, \"const\": 2 } }] */\n/* eslint one-var: 0, no-param-reassign: 0, max-len: [1, 130],\n  no-unused-expressions: [\"error\", { \"allowTernary\": true }], no-underscore-dangle: 0,\n  no-proto: 1, prefer-rest-params: 1 */\n\n// -- Vendor modules\n\n// -- Local modules\nimport Component from './component';\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Private Functions --------------------------------------------------------\n\n/**\n * Returns the path of the matching Web Component.\n *\n * @function ()\n * @private\n * @param {Object}    the view object,\n * @param {String}    the tag defining a Web Component\n * @returns {Object}  the path of the matching Web Component,\n */\nconst explore = function(view, tag) {\n  if (view.cList && view.cList[tag]) {\n    return view;\n  }\n  const keys = Object.keys(view);\n  for (let i = 0; i < keys.length; i++) {\n    if (view[keys[i]].cList) {\n      if (view[keys[i]].cList[tag]) {\n        return view[keys[i]];\n      }\n      if (view[keys[i]].components) {\n        return explore(view[keys[i]].components, tag);\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Attaches events to the rendered components.\n *\n * @function (arg1)\n * @private\n * @param {Object}    the view object,\n * @returns {}        -,\n */\nconst attachEvents = function(view) {\n  /* eslint-disable no-unused-expressions */\n  if (view.cList) {\n    const keys = Object.keys(view.cList);\n    let fn;\n\n    for (let i = 0; i < keys.length; i++) {\n      if (!view.components) {\n        // Extract components at the first level:\n        fn = view[keys[i].replace(/[^a-zA-z0-9]/g, '')];\n      } else {\n        // Extract components at levels n + 1:\n        fn = view.components[keys[i].replace(/[^a-zA-z0-9]/g, '')];\n      }\n      // Run Component events function:\n      fn.evented;\n      // Process sub components recursively:\n      attachEvents(fn);\n    }\n  }\n}; /* eslint-enable no-unused-expressions */\n\n/**\n * Code reused from Babel\n */\nconst _createClass = (function() {\n  function defineProperties(target, props) {\n    for (let i = 0; i < props.length; i++) {\n      const descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true;\n      if ('value' in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function(Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      /* istanbul ignore next */\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}());\n\n/**\n * Code reused from Babel\n */\nconst _possibleConstructorReturn = function(self, call) {\n  if (!self) {\n    /* istanbul ignore next */\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === 'object' || typeof call === 'function') ? call : self;\n};\n\n/**\n * Code reused from Babel\n */\nconst _inherits = function(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    /* istanbul ignore next */\n    throw new TypeError(`Super expression must either be null or a function, not ${typeof superClass}`);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    } });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n};\n\n/**\n * Code reused from Babel\n */\nconst _classCallCheck = function(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    /* istanbul ignore next */\n    throw new TypeError('Cannot call a class as a function');\n  }\n};\n\n/**\n * Code reused from Babel\n */\nconst _subClass = function(SuperClass, m) {\n  function SubClass() {\n    _classCallCheck(this, SubClass);\n    return _possibleConstructorReturn(this, (SubClass.__proto__ || Object.getPrototypeOf(SubClass)).apply(this, arguments));\n  }\n  _inherits(SubClass, SuperClass);\n\n  _createClass(SubClass, m);\n\n  return SubClass;\n};\n\n\n// -- Public Methods -----------------------------------------------------------\n\n/**\n* This library renders the View in the DOM.\n*\n* @namespace Vizu\n*/\nconst Vizu = {\n\n  /**\n   * Returns the version of this library.\n   *\n   * @method ()\n   * @public\n   * @param {}          -,\n   * @returns {String}  returns the version of this library,\n   */\n  version() {\n    return '{{lib:version}}';\n  },\n\n  /**\n   * Renders the View in the DOM.\n   *\n   * @method (arg1, arg2, arg3)\n   * @public\n   * @param {String}    the aggregated web components,\n   * @param {Object}    the list of web components and their reference,\n   * @param {Object}    the DOM element where the view (the aggregate of web components) is inserted,\n   * @returns {Object}  returns the view object,\n   * @since 0.0.0\n   */\n  render(template, cList, el) {\n    const keys = Object.prototype.toString.call(cList) === '[object Object]' ? Object.keys(cList) : []\n        , view = {}\n        ;\n    let t;\n\n    // Return null if the template is not a string:\n    if (typeof template !== 'string') {\n      return null;\n    }\n\n    // If no components, render the template as is:\n    if (!cList) {\n      if (el) {\n        el.innerHTML = template;\n      } else {\n        Vizu.vdom\n          ? (Vizu.vdom.window.document.body.innerHTML += template)\n          : (document.body.innerHTML += template);\n      }\n      return null;\n    }\n\n    // This view includes components, render them:\n    t = template;\n    for (let i = 0; i < keys.length; i++) {\n      const c = new cList[keys[i]]();\n      t = t.replace(keys[i], c.rendered);\n      view[keys[i].replace(/[^a-zA-z0-9]/g, '')] = c;\n    }\n    // Attach cList:\n    view.cList = keys.length > 0 ? cList : null;\n\n    // Fill the DOM:\n    if (el) {\n      el.innerHTML = t;\n    } else {\n      el = Vizu.vdom ? Vizu.vdom.window.document.body : document.body;\n      // Attach the component to the body as the first child:\n      el.innerHTML = t + el.innerHTML;\n    }\n\n    // Attach event(s)\n    // parse all components and for each component execute evented!\n    attachEvents(view);\n\n    // Attach parent element:\n    view.el = el;\n\n    // Return the rendered object (with a reference to all the web components):\n    return view;\n  },\n\n  /**\n   * Replaces a component with another component having the same tag.\n   *\n   * @method (arg1, arg2)\n   * @public\n   * @param {Object}    the view object,\n   * @param {Object}    the new component ({ '<Aaa />': 'new class' }),\n   * @returns {}        -,\n   * @since 0.0.0\n   */\n  replace(view, component) {\n    let id\n      , type\n      ;\n\n    // Check that view is an object with, at least, the properties cList and el:\n    if (Object.prototype.toString.call(view) !== '[object Object]' || !view.cList || !view.el) {\n      return;\n    }\n\n    // Check that component is an object:\n    if (Object.prototype.toString.call(component) !== '[object Object]') {\n      return;\n    }\n\n    // Process the new component:\n    const newctag = Object.keys(component)[0];\n    const newcname = newctag.replace(/[^a-zA-z0-9]/g, '');\n    const newc = new component[newctag]();\n\n    // Check if a component with the same name already exists in the view:\n    const path = explore(view, newctag);\n    if (path) {\n      // Get its id and remove it:\n      if (path[newcname]) {\n        id = path[newcname].id;\n        path[newcname] = null;\n        type = 1;\n      } else {\n        id = path.components[newcname].id;\n        path.components[newcname] = null;\n        type = 2;\n      }\n      path.cList[newctag] = null;\n\n      // Get its id and clear it:\n      const wrapper = Vizu.vdom\n        ? Vizu.vdom.window.document.createElement('div')\n        : document.createElement('div');\n\n      const oldNode = Vizu.vdom\n        ? Vizu.vdom.window.document.getElementById(id)\n        : document.getElementById(id);\n\n      wrapper.innerHTML = newc.rendered;\n      oldNode.parentNode.replaceChild(wrapper.firstChild, oldNode);\n\n      // Attach the new node to view:\n      if (type === 1) {\n        path[newcname] = newc;\n      } else {\n        path.components[newcname] = newc;\n      }\n      path.cList[newctag] = component[newctag];\n    }\n  },\n\n  /**\n   * Extends the class Component.\n   *\n   * @method (arg1)\n   * @public\n   * @param {Object}    the methods to add to Component,\n   * @returns {Object}  returns the extended class component,\n   * @since 0.0.3\n   */\n  createClass(methods) {\n    // Check that methods is an object:\n    if (Object.prototype.toString.call(methods) !== '[object Object]') {\n      return null;\n    }\n\n    // Extract keys:\n    const keys = Object.keys(methods);\n    const o = [];\n    for (let i = 0; i < keys.length; i++) {\n      o.push({\n        key: keys[i],\n        value: methods[keys[i]],\n      });\n    }\n\n    return _subClass(Component, o);\n  },\n};\n\nexport default Vizu;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"names":[],"mappings":"","sources":["vizu.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Vizu = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _component = require('./src/component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _vizu = require('./src/vizu');\n\nvar _vizu2 = _interopRequireDefault(_vizu);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = { Component: _component2.default, Vizu: _vizu2.default };\nmodule.exports = exports['default'];\n\n},{\"./src/component\":2,\"./src/vizu\":6}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global document */\n/* eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 1, \"let\": 1, \"const\": 2 } }] */\n/* eslint one-var: 0, semi-style: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\n\n\nvar _vizu = require('./vizu');\n\nvar _vizu2 = _interopRequireDefault(_vizu);\n\nvar _animate = require('./private/animate');\n\nvar _animate2 = _interopRequireDefault(_animate);\n\nvar _overslash = require('./private/overslash');\n\nvar _overslash2 = _interopRequireDefault(_overslash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\n/**\n* This class defines the web component.\n*\n* @namespace vizu\n*/\nvar Component = function () {\n  /**\n   * Creates an unique ID for this component.\n   *\n   * @constructor ()\n   * @public\n   * @param {}          -,\n   */\n  function Component() {\n    _classCallCheck(this, Component);\n\n    // Create an unique id for this component:\n    this.id = 'i' + Math.random().toString(36).substr(2, 7);\n    this.cList = null;\n    this.components = null;\n    this.props = {};\n    this.props.options = {};\n  }\n\n  /**\n   * Initialises the variables when the component is rendered.\n   *\n   * @method ()\n   * @public\n   * @param {}        -,\n   * @returns {}      -,\n   * @since 0.0.0\n   */\n\n\n  _createClass(Component, [{\n    key: 'getInitialState',\n    value: function getInitialState() {\n      // To avoid eslint error!\n      this.props = {};\n      this.props.options = {};\n    }\n\n    /**\n     * Returns the the first element that matches the specified CSS selector(s).\n     *\n     * @method (arg1)\n     * @public\n     * @param {String}    the CSS selector(s),\n     * @returns {Object}  returns the first element that matches a specified\n     *                    CSS selector(s),\n     * @since 0.0.0\n     */\n\n  }, {\n    key: '$',\n    value: function $(selector) {\n      var cid = this.id,\n          docu = _vizu2.default.vdom ? _vizu2.default.vdom.window.document : document;\n\n      var el = void 0;\n\n      /**\n       * Select a child element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the selector,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var select = function select(sel) {\n        if (typeof sel === 'string' && this[0]) {\n          var child = this[0].querySelector(sel);\n          if (child) {\n            this[0] = child;\n          }\n        }\n        return this;\n      };\n\n      /**\n       * Selects the specified child if it exists.\n       *\n       * @method (arg1)\n       * @public\n       * @param {Number}    the child index,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var selectChild = function selectChild(n) {\n        if (Object.prototype.toString.call(n) === '[object Number]') {\n          this[0] = this[0].children[n] ? this[0].children[n] : this[0];\n        }\n        return this;\n      };\n\n      /**\n       * Returns to the parent element.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var parent = function parent() {\n        if (this.root) {\n          // As a root parent is defined, we stop at it.\n          if (this[0] !== this.root) {\n            this[0] = this[0].parentNode;\n          }\n        } else {\n          this[0] = this[0].parentNode;\n        }\n        return this;\n      };\n\n      /**\n       * Returns to the root parent if defined.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns this,\n       * @since 0.0.7\n       */\n      var firstParent = function firstParent() {\n        if (this.root) {\n          this[0] = this.root;\n        }\n        return this;\n      };\n\n      /**\n       * Gets/Sets the HTML contents of the element,\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the html contents to add,\n       * @returns {String}  returns the node DOMString or this,\n       * @since 0.0.0\n       */\n      var html = function html(xmlString) {\n        if (xmlString) {\n          this[0].innerHTML = xmlString;\n          return this;\n        }\n        return this[0].innerHTML;\n      };\n\n      /**\n       * Removes all the childs of the current node.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns this,\n       * @since 0.0.4\n       */\n      var empty = function empty() {\n        while (this[0].firstChild) {\n          this[0].removeChild(this[0].firstChild);\n        }\n        return this;\n      };\n\n      /**\n       * Appends an HTML string after the last child of the current node.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    an HTML string,\n       * @returns {Object}  returns this,\n       * @since 0.0.4\n       */\n      var append = function append(xmlString) {\n        if (typeof xmlString === 'string') {\n          this[0].insertAdjacentHTML('beforeend', xmlString);\n        }\n        return this;\n      };\n\n      /**\n       * Appends an HTML string before the first child of the current node.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    an HTML string,\n       * @returns {Object}  returns this,\n       * @since 0.0.6\n       */\n      var prepend = function prepend(xmlString) {\n        if (typeof xmlString === 'string') {\n          this[0].insertAdjacentHTML('afterbegin', xmlString);\n        }\n        return this;\n      };\n\n      /**\n       * Appends an HTML string after the current node.\n       *\n       * Nota: this method adds a node after the current node only if it is\n       * a child node of this component. 'after' is forbidden on the root node.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    an HTML string,\n       * @returns {Object}  returns this,\n       * @since 0.0.6\n       */\n      var after = function after(xmlString) {\n        if (typeof xmlString === 'string' && this[0].id !== cid) {\n          this[0].insertAdjacentHTML('afterend', xmlString);\n        }\n        return this;\n      };\n\n      /**\n       * Appends an HTML string before the current node.\n       *\n       * Nota: this method adds a node before the current node only if it is\n       * a child node of this component. 'before' is forbidden on the root node.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    an HTML string,\n       * @returns {Object}  returns this,\n       * @since 0.0.6\n       */\n      var before = function before(xmlString) {\n        if (typeof xmlString === 'string' && this[0].id !== cid) {\n          this[0].insertAdjacentHTML('beforebegin', xmlString);\n        }\n        return this;\n      };\n\n      /**\n       * Replaces the current node with the given DOMString.\n       *\n       * Nota: this method replaces the current node only if it is\n       * a child node of this component. 'replaceWith' is forbidden on the root node.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    an HTML string,\n       * @returns {Object}  returns this,\n       * @since 0.0.6\n       */\n      var replaceWith = function replaceWith(xmlString) {\n        var oldChild = this[0],\n            parento = oldChild.parentNode\n        // , index    =  Array.prototype.indexOf.call(parent.children, oldChild)\n        ,\n            wrapper = docu.createElement('div');\n        var newChild = void 0;\n\n        if (typeof xmlString === 'string' && oldChild.id !== cid) {\n          // Replace the old child by new one:\n          wrapper.innerHTML = xmlString;\n          newChild = wrapper.firstChild;\n          parento.replaceChild(newChild, oldChild);\n        }\n        return this;\n      };\n\n      /**\n       * Gets/Sets the text contents of the element,\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the text contents to add,\n       * @returns {String}  returns the text contents or this;,\n       * @since 0.0.0\n       */\n      var text = function text(texte) {\n        if (texte) {\n          this[0].textContent = texte;\n          return this;\n        }\n        return this[0].textContent;\n      };\n\n      /**\n       * Clones the selected element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {Boolean}   true clone with children, false without,\n       * @returns {Object}  returns the cloned element,\n       * @since 0.0.8\n       */\n      var clone = function clone(deep) {\n        if (deep === true || deep === false) {\n          return this[0].cloneNode(deep);\n        }\n        return this[0].cloneNode(true);\n      };\n\n      /**\n       * Inserts a child element before another child element.\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {Object}    the new node element,\n       * @param {Object}    the target node element,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var insertChildBefore = function insertChildBefore(newChild, child) {\n        if (newChild) {\n          this[0].insertBefore(newChild, child);\n        }\n        return this;\n      };\n\n      /**\n       * Removed the passed-in child element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {Object}    the child element to remove,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var removeChild = function removeChild(child) {\n        if (child) {\n          this[0].removeChild(child);\n        }\n        return this;\n      };\n\n      /**\n       * Replaces a child by another.\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {Object}    the new node element,\n       * @param {Object}    the node element to replace,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var replaceChild = function replaceChild(newChild, child) {\n        if (newChild) {\n          this[0].replaceChild(newChild, child);\n        }\n        return this;\n      };\n\n      /**\n       * Returns the children.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns the children HTMLCollection,\n       * @since 0.0.8\n       */\n      var children = function children() {\n        return this[0].children;\n      };\n\n      /**\n       * Returns the children position in the parent tree.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns the children position,\n       * @since 0.0.8\n       */\n      var childIndex = function childIndex() {\n        var child = this[0],\n            index = 0;\n        while (child !== null) {\n          child = child.previousElementSibling;\n          index += 1;\n        }\n        return index - 1;\n      };\n\n      /**\n       * Returns the DOMRect object that bounds the contents of the range.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns the DOMRect object,\n       * @since 0.0.8\n       */\n      var getRect = function getRect() {\n        return this[0] ? this[0].getBoundingClientRect() : null;\n      };\n\n      /**\n       * Gets/Sets the style attribute of the element,\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {String}    the style attribute,\n       * @param {String}    the style attribute value,\n       * @returns {String}  returns the style attribute value or this,\n       * @since 0.0.3\n       */\n      var css = function css(styleAttr, value) {\n        var arr = typeof styleAttr === 'string' ? styleAttr.split('-') : [];\n        var attr = '';\n\n        // Convert style attribute name with '-' (ex.: 'font-size' to 'fontSize'):\n        for (var i = 0; i < arr.length; i++) {\n          if (i === 0) {\n            attr += arr[i];\n          } else {\n            attr += arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n          }\n        }\n\n        if (!value) {\n          // Get attribute:\n          return this[0].style[attr];\n        }\n\n        // Set attribute:\n        this[0].style[attr] = value;\n        return this;\n      };\n\n      /**\n       * Returns the DOMTokenList collection of the class attributes of the element.\n       *\n       * @method ()\n       * @public\n       * @param {}          -,\n       * @returns {Object}  returns the DOMTokenList of the element,\n       * @since 0.0.0\n       */\n      var getClassList = function getClassList() {\n        return this[0].classList;\n      };\n\n      /**\n       * Adds a class name to the element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the class name to add,\n       * @returns {Object}  returns this,\n       * @since 0.0.0\n       */\n      var addClass = function addClass(className) {\n        this[0].classList.add(className);\n        return this;\n      };\n\n      /**\n       * Adds a list of classes to the element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {Array}     the list of classes to add,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var addClasses = function addClasses(classes) {\n        if (Array.isArray(classes)) {\n          for (var i = 0; i < classes.length; i++) {\n            this[0].classList.add(classes[i]);\n          }\n        }\n        return this;\n      };\n\n      /**\n       * Removes a class name from the element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the class name to remove,\n       * @returns {Object}  returns this,\n       * @since 0.0.0\n       */\n      var removeClass = function removeClass(className) {\n        this[0].classList.remove(className);\n        return this;\n      };\n\n      /**\n       * Removes a list of classes from the element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {Array}     the list of classes to remove,\n       * @returns {Object}  returns this,\n       * @since 0.0.8\n       */\n      var removeClasses = function removeClasses(classes) {\n        if (Array.isArray(classes)) {\n          for (var i = 0; i < classes.length; i++) {\n            this[0].classList.remove(classes[i]);\n          }\n        }\n        return this;\n      };\n\n      /**\n       * Toggles a class name for the element.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the class name to add/remove,\n       * @returns {Object}  returns this,\n       * @since 0.0.0\n       */\n      var toggleClass = function toggleClass(className) {\n        this[0].classList.toggle(className);\n        return this;\n      };\n\n      /**\n       * Checks if the element has the passed-in class.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the class name,\n       * @returns {Boolean} returns true or false,\n       * @since 0.0.8\n       */\n      var hasClass = function hasClass(className) {\n        var list = this[0].classList.value.split(' ');\n\n        if (Object.prototype.toString.call(className) === '[object String]' && list.indexOf(className) !== -1) {\n          return true;\n        }\n        return false;\n      };\n\n      /**\n       * Sets or Gets the specified attribute.\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {String}    the attribute name,\n       * @param {String}    the attribute value,\n       * @returns {String}  returns the attribute value or this,\n       * @since 0.0.6\n       */\n      var attr = function attr(attribute, value) {\n        if (value) {\n          this[0].setAttribute(attribute, value);\n          return this;\n        }\n        return this[0].getAttribute(attribute);\n      };\n\n      /**\n       * Removes the specified attribute.\n       *\n       * @method (arg1)\n       * @public\n       * @param {String}    the attribute name,\n       * @returns {Object}  returns this,\n       * @since 0.0.0\n       */\n      var removeAttr = function removeAttr(attribute) {\n        if (attribute) {\n          this[0].removeAttribute(attribute);\n        }\n        return this;\n      };\n\n      /**\n       * Performs a custom animation of a set of CSS properties.\n       *\n       * @method (properties [, duration ] [, easing ] [, complete ])\n       * @public\n       * @param {Object}    An object of CSS properties,\n       * @param {Number}    define how long the animation run,\n       * @param {Easing}    the easing animation method,\n       * @param {Function}  the function to call at completion,\n       * @returns {Object}  returns this,\n       * @since 0.0.7\n       */\n      var animate = function animate(properties) {\n        var DTIME = 400,\n            FAST = 200,\n            SLOW = 600,\n            INC = 10,\n            elem = this[0],\n            delay = INC;\n\n        // Is the argument properties an object?\n        if (!_overslash2.default.isLiteralObject(properties)) {\n          return this;\n        }\n\n        // Extract the optional arguments:\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var argus = _animate2.default.extractArgs(args);\n\n        // Set the duration:\n        var duration = _overslash2.default.isNumber(argus.duration) ? argus.duration : function (arg) {\n          if (arg === 'fast') return FAST;\n          if (arg === 'slow') return SLOW;\n          return DTIME;\n        }(argus.duration);\n\n        // Set the easing (swing only for the time being):\n        var easing = _animate2.default.easing && _animate2.default.easing[argus.easing] ? _animate2.default.easing[argus.easing] : _animate2.default.swing;\n\n        // Set the callback:\n        var callback = argus.callback ? argus.callback : null;\n\n        // Run the animation:\n        _animate2.default.run(elem, properties, easing, duration, delay, callback);\n\n        // Test Mode:\n        if (_vizu2.default.vdom) {\n          this.probe = {\n            duration: duration,\n            easing: _animate2.default.easing && _animate2.default.easing[argus.easing] ? argus.easing : 'swing',\n            callback: callback\n          };\n        }\n\n        return this;\n      };\n\n      /**\n       * Attachs an event listener to the current node.\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {String}    the DOM event string,\n       * @param {Function}  the listner function,\n       * @returns {Object}  returns this,\n       * @since 0.0.5\n       */\n      var on = function on(event, listener) {\n        this[0].addEventListener(event, listener);\n        return this;\n      };\n\n      /**\n       * Removes an event listener from the current node.\n       *\n       * @method (arg1, arg2)\n       * @public\n       * @param {String}    the DOM event string,\n       * @param {Function}  the listner function,\n       * @returns {Object}  returns this,\n       * @since 0.0.5\n       */\n      var off = function off(event, listener) {\n        this[0].removeEventListener(event, listener);\n        return this;\n      };\n\n      // -- Main\n      if (selector) {\n        // Selects the first element that matches the selector(s):\n        el = docu.querySelector('#' + cid).querySelector(selector);\n      } else {\n        // Selects the entire 'web component':\n        el = docu.querySelector('#' + cid);\n      }\n\n      return {\n        0: el,\n        id: el ? el.id : null,\n        select: select,\n        selectChild: selectChild,\n        parent: parent,\n        firstParent: firstParent,\n        html: html,\n        empty: empty,\n        append: append,\n        prepend: prepend,\n        after: after,\n        before: before,\n        replaceWith: replaceWith,\n        text: text,\n        clone: clone,\n        insertChildBefore: insertChildBefore,\n        removeChild: removeChild,\n        replaceChild: replaceChild,\n        children: children,\n        childIndex: childIndex,\n        getRect: getRect,\n        css: css,\n        getClassList: getClassList,\n        addClass: addClass,\n        addClasses: addClasses,\n        removeClass: removeClass,\n        removeClasses: removeClasses,\n        toggleClass: toggleClass,\n        hasClass: hasClass,\n        attr: attr,\n        removeAttr: removeAttr,\n        animate: animate,\n        on: on,\n        off: off\n      };\n    }\n\n    /**\n     * Attaches event(s) to the given node.\n     *\n     * @method (arg1, arg2)\n     * @public\n     * @param {String}    the DOM event name,\n     * @param {Function}  the event listener,\n     * @returns {Funtion} returns this,\n     * @since 0.0.5\n     */\n    /* istanbul ignore next */\n\n  }, {\n    key: 'events',\n    value: function events() {\n      // Just to avoid eslint error!\n      return this;\n    }\n\n    /**\n     * Returns the defined web component.\n     *\n     * @method ()\n     * @public\n     * @param {}          -,\n     * @returns {String}  returns the web component,\n     * @since 0.0.0\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      /* istanbul ignore next */\n      return '<div>' + this.id + '</div>';\n    }\n\n    /**\n     * Processes the web component to convert child(s) to plain HTML.\n     *\n     * @method ()\n     * @private\n     * @param {}          -,\n     * @returns {String}  returns the web component,\n     * @since 0.0.0\n     */\n\n  }, {\n    key: 'rendered',\n    get: function get() {\n      var t = void 0;\n      // Initializes:\n      this.getInitialState();\n      // Add an unique ID to this component:\n      // let t = this.render().replace(/<div>/, `<div id=\"${this.id}\">`);\n      var co = this.render();\n      if (co.match(/^\\s*<div/)) {\n        t = co.replace(/^\\s*<div/, '<div id= \"' + this.id + '\"');\n      } else if (co.match(/^\\s*<header/)) {\n        t = co.replace(/^\\s*<header/, '<header id= \"' + this.id + '\"');\n      } else if (co.match(/^\\s*<footer/)) {\n        t = co.replace(/^\\s*<footer/, '<footer id= \"' + this.id + '\"');\n      } else {\n        t = co;\n      }\n\n      if (this.cList) {\n        // This component includes components, render them:\n        this.components = {};\n        var keys = Object.keys(this.cList);\n        for (var i = 0; i < keys.length; i++) {\n          var c = new this.cList[keys[i]]();\n          t = t.replace(keys[i], c.rendered);\n          this.components[keys[i].replace(/[^a-zA-z0-9]/g, '')] = c;\n        }\n      }\n      // Return the rendered web component:\n      return t;\n    }\n\n    /**\n     * Processes the web component events.\n     *\n     * @method ()\n     * @private\n     * @param {}          -,\n     * @returns {}        -,\n     * @since 0.0.5\n     */\n\n  }, {\n    key: 'evented',\n    get: function get() {\n      return this.events();\n    }\n  }]);\n\n  return Component;\n}();\n\nexports.default = Component;\nmodule.exports = exports['default'];\n\n},{\"./private/animate\":3,\"./private/overslash\":4,\"./vizu\":6}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _overslash = require('./overslash');\n\nvar _overslash2 = _interopRequireDefault(_overslash);\n\nvar _utilities = require('./utilities');\n\nvar _utilities2 = _interopRequireDefault(_utilities);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\n/* global */\n/* eslint one-var: 0, semi-style: 0, prefer-destructuring: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\nexports.default = {\n\n  /**\n   * Extracts the optional argument of 'animate'.\n   *\n   * @function (arg1, arg2, arg3)\n   * @private\n   * @param {?}         duration, easing or callback,\n   * @param {?}         easing or callback,\n   * @param {Object}    the function to call at completion,\n   * @returns {Object}  returns an object with the properties duration, easing\n   *                    and callback,\n   * @since 0.0.7\n   */\n  extractArgs: function extractArgs() {\n    for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {\n      arg[_key] = arguments[_key];\n    }\n\n    var nb = arg[0].length,\n        args = arg[0];\n\n    var duration = void 0,\n        easing = void 0,\n        callback = void 0;\n\n    switch (nb) {\n      case 0:\n        break;\n\n      case 1:\n        if (_overslash2.default.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n        } else if (_overslash2.default.isString(args[0])) {\n          easing = args[0];\n        } else if (_overslash2.default.isFunction(args[0])) {\n          callback = args[0];\n        }\n        break;\n\n      case 2:\n        if (_overslash2.default.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n          if (_overslash2.default.isString(args[1])) {\n            easing = args[1];\n          } else if (_overslash2.default.isFunction(args[1])) {\n            callback = args[1];\n          }\n        } else if (_overslash2.default.isString(args[0])) {\n          easing = args[0];\n          if (_overslash2.default.isFunction(args[1])) {\n            callback = args[1];\n          }\n        }\n        break;\n\n      case 3:\n        if (_overslash2.default.isNumber(args[0]) || args[0] === 'fast' || args[0] === 'slow') {\n          duration = args[0];\n        }\n        if (_overslash2.default.isString(args[1])) {\n          easing = args[1];\n        }\n        if (_overslash2.default.isFunction(args[2])) {\n          callback = args[2];\n        }\n        break;\n\n      /* istanbul ignore next */\n      default:\n        break;\n    }\n    return {\n      duration: duration,\n      easing: easing,\n      callback: callback\n    };\n  },\n\n\n  /**\n   * Retrieves the CSS property values for the given node.\n   *\n   * @function (arg1, arg2)\n   * @private\n   * @param {Object}    the given node,\n   * @param {Object}    the CSS properties to animate,\n   * @returns {Object}  returns an object with the properties initial, change, suffix\n   *                    per animated property,\n   * @since 0.0.7\n   */\n  getProps: function getProps(el, properties) {\n    var keys = Object.keys(properties),\n        props = {},\n        names = [];\n\n    var name = void 0,\n        i = void 0;\n\n    // Parse the properties:\n    for (i = 0; i < keys.length; i++) {\n      // Normalize the name of the property:\n      name = _utilities2.default.normalizeCssPropertyName(keys[i]);\n      // Check it is a valid CSS property:\n      if (el.style[name]) {\n        names.push(name);\n        props[name] = {\n          initial: parseFloat(el.style[name], 10),\n          change: parseFloat(properties[keys[i]]) - parseFloat(el.style[name]),\n          suffix: el.style[name].replace(/[0-9.]/g, '')\n        };\n      }\n    }\n    props.name = names;\n    return props;\n  },\n\n\n  /**\n   * Updates dynamically the CSS properties from their initial value to their final.\n   *\n   * @function (arg1, arg2, arg3, arg4, arg5, arg6)\n   * @private\n   * @param {Object}    the given node,\n   * @param {Object}    the CSS properties to update,\n   * @param {Function}  the easing method,\n   * @param {Number}    the animation duration,\n   * @param {Number}    the animation step,\n   * @param {Function}  the function to call at the completion,\n   * @returns {}        -,\n   * @since 0.0.7\n   */\n  run: function run(el, properties, easing, duration, delay, callback) {\n    var props = this.getProps(el, properties),\n        elem = el;\n\n    var lapseOfTime = 0;\n\n    var timer = setInterval(function () {\n      lapseOfTime += delay;\n      if (lapseOfTime > duration) {\n        clearInterval(timer);\n        if (callback) callback();\n      }\n      // easing:\n      for (var i = 0; i < props.name.length; i++) {\n        elem.style[props.name[i]] = easing(lapseOfTime, props[props.name[i]].initial, props[props.name[i]].change, duration) + props[props.name[i]].suffix;\n      }\n    }, delay);\n  },\n\n\n  /**\n   * The default easing method (if PicoQ.easing.e() aren't provided).\n   *\n   * @function (arg1, arg2, arg3, arg4)\n   * @private\n   * @param {Number}    the current lapse time,\n   * @param {Number}    the initial CSS property value,\n   * @param {Number}    the difference between the final and the initial value,\n   * @param {Number}    the animation duration,\n   * @returns {Number}  returns the value of the CSS property at the current lapse time,\n   * @since 0.0.7\n   */\n  /* eslint-disable no-mixed-operators */\n  swing: function swing(t, b, c, d) {\n    return c * (0.5 - Math.cos(t / d * Math.PI) / 2) + b;\n  }\n}; /* eslint-enable no-underscore-dangle */\n\nmodule.exports = exports['default'];\n\n},{\"./overslash\":4,\"./utilities\":5}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global */\n/* eslint one-var: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\nexports.default = {\n\n  /**\n   * Is a given value a string?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}      the object to test,\n   * @returns {Boolean}   returns true or false,\n   * @since 0.0.7\n   */\n  isString: function isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n  },\n\n\n  /**\n   * Is a given value a number?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}      the object to test,\n   * @returns {Boolean}   returns true or false,\n   * @since 0.0.7\n   */\n  isNumber: function isNumber(obj) {\n    return Object.prototype.toString.call(obj) === '[object Number]';\n  },\n\n\n  /**\n   * Is a given variable a literal object?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}    the object to test,\n   * @returns {Boolean} returns true or false,\n   * @since 0.0.7\n   */\n  isLiteralObject: function isLiteralObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  },\n\n\n  /**\n   * Is a given variable a function?\n   *\n   * @function (arg1)\n   * @private\n   * @param {Object}    the object to test,\n   * @returns {Boolean} returns true or false,\n   * @since 0.0.7\n   */\n  isFunction: function isFunction(obj) {\n    return Object.prototype.toString.call(obj) === '[object Function]';\n  }\n};\nmodule.exports = exports['default'];\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _overslash = require('./overslash');\n\nvar _overslash2 = _interopRequireDefault(_overslash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Public Methods -----------------------------------------------------------\n\nexports.default = {\n\n  /**\n   * Normalizes the CSS properties.\n   * (replace '-' between composite name by camelcase style).\n   * Ex: font-size -> fontSize\n   *\n   * @function (arg1)\n   * @private\n   * @param {String}    the CSS property name,\n   * @returns {String}  the normalized CSS property name,\n   * @since 0.0.7\n   */\n  normalizeCssPropertyName: function normalizeCssPropertyName(name) {\n    var arr = _overslash2.default.isString(name) ? name.split('-') : [];\n\n    var normalized = '';\n\n    // Convert name with '-' (ex.: 'font-size' to 'fontSize'):\n    for (var i = 0; i < arr.length; i++) {\n      if (i === 0) {\n        normalized += arr[i];\n      } else {\n        normalized += arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n      }\n    }\n    return normalized;\n  }\n}; /* global */\n/* eslint one-var: 0, semi-style: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\n\nmodule.exports = exports['default'];\n\n},{\"./overslash\":4}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /* global document */\n/* eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 1, \"let\": 1, \"const\": 2 } }] */\n/* eslint one-var: 0, no-param-reassign: 0, max-len: [1, 130],\n  no-unused-expressions: [\"error\", { \"allowTernary\": true }], no-underscore-dangle: 0,\n  no-proto: 1, prefer-rest-params: 1, semi-style: 0, prefer-destructuring: 0 */\n\n// -- Vendor modules\n\n// -- Local modules\n\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// -- Global constants (in the scope of this module)\n\n\n// -- Private Functions --------------------------------------------------------\n\n/**\n * Returns the path of the matching Web Component.\n *\n * @function ()\n * @private\n * @param {Object}    the view object,\n * @param {String}    the tag defining a Web Component\n * @returns {Object}  the path of the matching Web Component,\n */\nvar explore = function explore(view, tag) {\n  if (view.cList && view.cList[tag]) {\n    return view;\n  }\n  var keys = Object.keys(view);\n  for (var i = 0; i < keys.length; i++) {\n    if (view[keys[i]].cList) {\n      if (view[keys[i]].cList[tag]) {\n        return view[keys[i]];\n      }\n      if (view[keys[i]].components) {\n        return explore(view[keys[i]].components, tag);\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Attaches events to the rendered components.\n *\n * @function (arg1)\n * @private\n * @param {Object}    the view object,\n * @returns {}        -,\n */\nvar attachEvents = function attachEvents(view) {\n  /* eslint-disable no-unused-expressions */\n  if (view.cList) {\n    var keys = Object.keys(view.cList);\n    var fn = void 0;\n\n    for (var i = 0; i < keys.length; i++) {\n      if (!view.components) {\n        // Extract components at the first level:\n        fn = view[keys[i].replace(/[^a-zA-z0-9]/g, '')];\n      } else {\n        // Extract components at levels n + 1:\n        fn = view.components[keys[i].replace(/[^a-zA-z0-9]/g, '')];\n      }\n      // Run Component events function:\n      fn.evented;\n      // Process sub components recursively:\n      attachEvents(fn);\n    }\n  }\n}; /* eslint-enable no-unused-expressions */\n\n/**\n * Code reused from Babel\n */\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;\n      if ('value' in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      /* istanbul ignore next */\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\n\n/**\n * Code reused from Babel\n */\nvar _possibleConstructorReturn = function _possibleConstructorReturn(self, call) {\n  if (!self) {\n    /* istanbul ignore next */\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === 'object' || typeof call === 'function') ? call : self;\n};\n\n/**\n * Code reused from Babel\n */\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    /* istanbul ignore next */\n    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n};\n\n/**\n * Code reused from Babel\n */\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    /* istanbul ignore next */\n    throw new TypeError('Cannot call a class as a function');\n  }\n};\n\n/**\n * Code reused from Babel\n */\nvar _subClass = function _subClass(SuperClass, m) {\n  function SubClass() {\n    _classCallCheck(this, SubClass);\n    return _possibleConstructorReturn(this, (SubClass.__proto__ || Object.getPrototypeOf(SubClass)).apply(this, arguments));\n  }\n  _inherits(SubClass, SuperClass);\n\n  _createClass(SubClass, m);\n\n  return SubClass;\n};\n\n// -- Public Methods -----------------------------------------------------------\n\n/**\n* This library renders the View in the DOM.\n*\n* @namespace Vizu\n*/\nvar Vizu = {\n\n  /**\n   * Returns the version of this library.\n   *\n   * @method ()\n   * @public\n   * @param {}          -,\n   * @returns {String}  returns the version of this library,\n   */\n  version: function version() {\n    return '{{lib:version}}';\n  },\n\n\n  /**\n   * Renders the View in the DOM.\n   *\n   * @method (arg1, arg2, arg3)\n   * @public\n   * @param {String}    the aggregated web components,\n   * @param {Object}    the list of web components and their reference,\n   * @param {Object}    the DOM element where the view (the aggregate of web components) is inserted,\n   * @returns {Object}  returns the view object,\n   * @since 0.0.0\n   */\n  render: function render(template, cList, el) {\n    var keys = Object.prototype.toString.call(cList) === '[object Object]' ? Object.keys(cList) : [],\n        view = {};\n    var t = void 0;\n\n    // Return null if the template is not a string:\n    if (typeof template !== 'string') {\n      return null;\n    }\n\n    // If no components, render the template as is:\n    if (!cList) {\n      if (el) {\n        el.innerHTML = template;\n      } else {\n        Vizu.vdom ? Vizu.vdom.window.document.body.innerHTML += template : document.body.innerHTML += template;\n      }\n      return null;\n    }\n\n    // This view includes components, render them:\n    t = template;\n    for (var i = 0; i < keys.length; i++) {\n      var c = new cList[keys[i]]();\n      t = t.replace(keys[i], c.rendered);\n      view[keys[i].replace(/[^a-zA-z0-9]/g, '')] = c;\n    }\n    // Attach cList:\n    view.cList = keys.length > 0 ? cList : null;\n\n    // Fill the DOM:\n    if (el) {\n      el.innerHTML = t;\n    } else {\n      el = Vizu.vdom ? Vizu.vdom.window.document.body : document.body;\n      // Attach the component to the body as the first child:\n      el.innerHTML = t + el.innerHTML;\n    }\n\n    // Attach event(s)\n    // parse all components and for each component execute evented!\n    attachEvents(view);\n\n    // Attach parent element:\n    view.el = el;\n\n    // Return the rendered object (with a reference to all the web components):\n    return view;\n  },\n\n\n  /**\n   * Replaces a component with another component having the same tag.\n   *\n   * @method (arg1, arg2)\n   * @public\n   * @param {Object}    the view object,\n   * @param {Object}    the new component ({ '<Aaa />': 'new class' }),\n   * @returns {}        -,\n   * @since 0.0.0\n   */\n  replace: function replace(view, component) {\n    var id = void 0,\n        type = void 0;\n\n    // Check that view is an object with, at least, the properties cList and el:\n    if (Object.prototype.toString.call(view) !== '[object Object]' || !view.cList || !view.el) {\n      return;\n    }\n\n    // Check that component is an object:\n    if (Object.prototype.toString.call(component) !== '[object Object]') {\n      return;\n    }\n\n    // Process the new component:\n    var newctag = Object.keys(component)[0];\n    var newcname = newctag.replace(/[^a-zA-z0-9]/g, '');\n    var newc = new component[newctag]();\n\n    // Check if a component with the same name already exists in the view:\n    var path = explore(view, newctag);\n    if (path) {\n      // Get its id and remove it:\n      if (path[newcname]) {\n        id = path[newcname].id;\n        path[newcname] = null;\n        type = 1;\n      } else {\n        id = path.components[newcname].id;\n        path.components[newcname] = null;\n        type = 2;\n      }\n      path.cList[newctag] = null;\n\n      // Get its id and clear it:\n      var wrapper = Vizu.vdom ? Vizu.vdom.window.document.createElement('div') : document.createElement('div');\n\n      var oldNode = Vizu.vdom ? Vizu.vdom.window.document.getElementById(id) : document.getElementById(id);\n\n      wrapper.innerHTML = newc.rendered;\n      oldNode.parentNode.replaceChild(wrapper.firstChild, oldNode);\n\n      // Attach the new node to view:\n      if (type === 1) {\n        path[newcname] = newc;\n      } else {\n        path.components[newcname] = newc;\n      }\n      path.cList[newctag] = component[newctag];\n    }\n  },\n\n\n  /**\n   * Extends the class Component.\n   *\n   * @method (arg1)\n   * @public\n   * @param {Object}    the methods to add to Component,\n   * @returns {Object}  returns the extended class component,\n   * @since 0.0.3\n   */\n  createClass: function createClass(methods) {\n    // Check that methods is an object:\n    if (Object.prototype.toString.call(methods) !== '[object Object]') {\n      return null;\n    }\n\n    // Extract keys:\n    var keys = Object.keys(methods);\n    var o = [];\n    for (var i = 0; i < keys.length; i++) {\n      o.push({\n        key: keys[i],\n        value: methods[keys[i]]\n      });\n    }\n\n    return _subClass(_component2.default, o);\n  }\n};\n\nexports.default = Vizu;\nmodule.exports = exports['default'];\n\n},{\"./component\":2}]},{},[1])(1)\n});"],"file":"vizu.js"}